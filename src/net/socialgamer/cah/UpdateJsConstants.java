package net.socialgamer.cah;

import java.io.File;
import java.io.PrintWriter;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;


public class UpdateJsConstants {

  private static final String enumHeaderFmt = "cah.$.%s = function() {\r\n  // pass\r\n};\r\n";
  private static final String enumDummyFmt = "cah.$.%s.prototype.dummy = undefined;\r\n";
  private static final String enumValueFmt = "cah.$.%s.%s = \"%s\";\r\n";

  /**
   * @param args
   */
  @SuppressWarnings("rawtypes")
  public static void main(final String[] args) throws Exception {
    final String dir = "WebContent/js/";
    final File outFile = new File(dir + "cah.constants.js");
    assert outFile.canWrite();
    assert outFile.delete();
    assert outFile.createNewFile();
    final PrintWriter writer = new PrintWriter(outFile);

    writer.println("// This file is automatically generated. Do not edit.");
    writer.println();
    writer.println("cah.$ = {};");
    writer.println();

    final Class[] classes = Constants.class.getClasses();
    for (final Class c : classes) {
      if (!c.isEnum()) {
        continue;
      }
      final String cName = c.getName().split("\\$")[1];
      System.out.println(cName);
      writer.format(enumHeaderFmt, cName);
      writer.format(enumDummyFmt, cName);
      final Map<String, String> values = getEnumValues(c);
      for (final String key : values.keySet()) {
        final String value = values.get(key);
        writer.format(enumValueFmt, cName, key, value);
      }
      writer.println();
    }
    writer.flush();
    writer.close();
  }

  @SuppressWarnings("rawtypes")
  private static Map<String, String> getEnumValues(final Class enumClass)
      throws IllegalArgumentException, IllegalAccessException {
    if (!enumClass.isEnum()) {
      throw new IllegalArgumentException(enumClass.getName() + " is not an enum");
    }

    final Field[] flds = enumClass.getDeclaredFields();
    final HashMap<String, String> enumMap = new HashMap<String, String>();
    for (final Field f : flds) {
      if (f.isEnumConstant()) {
        enumMap.put(f.getName(), f.get(null).toString());
      }
    }
    return enumMap;
  }
}

////Automatically generated file. Do not edit!
//
//cah.$ = {};
//
//cah.$.DisconnectReason = {};
//cah.$.DisconnectReason.prototype.dummy = undefined;
//cah.$.DisconnectReason.KICKED = "kicked";
//cah.$.DisconnectReason.MANUAL = "manual";
//cah.$.DisconnectReason.PING_TIMEOUT = "ping_timeout";
